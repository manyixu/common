/*
 * Copyright 2013 serso aka se.solovyev
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * ---------------------------------------------------------------------
 * Contact details
 *
 * Email: se.solovyev@gmail.com
 * Site:  http://se.solovyev.org
 */

package org.solovyev.common.security;

import org.jetbrains.annotations.NotNull;

/**
 * User: serso
 * Date: 8/20/12
 * Time: 8:22 PM
 */
public interface SecurityService<E, D, H> {

    /**
     * Returns salt generator. Salt generated by this generator
     * must be suitable for secret key provider obtained from {@link SecurityService#getSecretKeyProvider()}.
     * This usually means the length of bytes but may also apply to the byte structure
     *
     * @return salt generator
     */
    @NotNull
    SaltGenerator getSaltGenerator();

    /**
     * Returns secret key provider. Secret key generated by this provider
     * must be suitable for cipherer obtained from {@link SecurityService#getCipherer()}.
     *
     * @return secret key provider
     */
    @NotNull
    SecretKeyProvider getSecretKeyProvider();

    /**
     * Returns cipherer. Cipherer secret key must be obtained
     * from {@link SecretKeyProvider#getSecretKey(java.lang.String, byte[])} method of
     * secret key provider from {@link SecurityService#getSecretKeyProvider()}
     *
     * @return cipherer
     */
    @NotNull
    Cipherer<E, D> getCipherer();

    /**
     * Returns hash provider for decrypted object.
     *
     * @return hash provider
     */
    @NotNull
    HashProvider<D, H> getHashProvider();
}
